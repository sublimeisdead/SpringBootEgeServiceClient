package ru.nahodka.ege_clientv2;

import com.impossibl.postgres.api.jdbc.PGConnection;
import com.impossibl.postgres.api.jdbc.PGNotificationListener;
import com.impossibl.postgres.jdbc.PGDataSource;
import jcifs.smb.NtlmPasswordAuthentication;
import jcifs.smb.SmbFile;
import org.apache.xml.serializer.utils.DOM2Helper;
import org.apache.xml.utils.DOMHelper;
import org.springframework.ws.context.MessageContext;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import ru.it.smev.message_exchange.autogenerated.service.v1_1.DestinationOverflowException;
import ru.it.smev.message_exchange.autogenerated.service.v1_2.*;
import ru.it.smev.message_exchange.autogenerated.service.v1_3.IncorrectResponseContentTypeException;
import ru.it.smev.message_exchange.autogenerated.service.v1_3.QuoteLimitExceededException;
import ru.it.smev.message_exchange.autogenerated.service.v1_3.RecipientIsNotFoundException;
import ru.it.smev.message_exchange.autogenerated.service.v1_3.SMEVMessageExchangeService;
import ru.it.smev.message_exchange.autogenerated.types.basic.v1_3.InteractionStatusType;
import ru.nahodka.ege_clientv2.model.EventObject;
import ru.nahodka.ege_clientv2.model.OrderStatusEvent;
import org.json.JSONException;
import org.json.JSONObject;
import clientv2.wsdl.NewResponseType;
import ru.nakhodka.smev3.*;

import javax.jws.HandlerChain;
import javax.xml.bind.*;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.NamespaceContext;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMResult;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import java.io.*;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.sql.*;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.*;


public class StatusListener {
    private static final org.apache.log4j.Logger logger= org.apache.log4j.Logger.getLogger(StatusListener.class);
    public static volatile StatusListener instance;
    private static Object mutex = new Object();
    static String currentState;
    static String idApplication;
    static int status;

    private StatusListener() {
    }

    public static StatusListener getInstance() {
        StatusListener result = instance;
        if (result == null) {
            synchronized (mutex) {
                result = instance;
                if (result == null)
                    instance = result = new StatusListener();

            }

        }
        return result;

    }

    public static void listen() throws IOException {
        PGDataSource dataSource=new PGDataSource();
        Properties properties=PropertiesLoader.getProperties();
        dataSource.setHost(properties.getProperty("dbhost"));
        dataSource.setPort(Integer.valueOf(properties.getProperty("dbport")));
        dataSource.setDatabase("ege_requests");
        dataSource.setUser(properties.getProperty("dbuser"));
        dataSource.setPassword(properties.getProperty("dbpassword"));

        Map<Integer,Integer> map=new HashMap<>();
        map.put(1,2);
        map.put(2,1);
        map.put(3,6);
        map.put(4,3);
        map.put(5,4);
        map.put(6,9);
        map.put(7,10);
        map.put(8,7);
        map.put(9,11);

        PGNotificationListener listener= (int processId, String channelName, String payload) -> {

            try {

                JSONObject jsonObject=new JSONObject(payload);
                currentState= String.valueOf(jsonObject.getInt("current_state"));
                idApplication=jsonObject.getString("id_application");
                try{
                    String query="SELECT state_id FROM appeal_request_state WHERE id=?";
                    Connection connection=dataSource.getConnection();
                    PreparedStatement statement=connection.prepareStatement(query);
                    statement.setString(1,String.valueOf(currentState));
                    ResultSet set=statement.executeQuery();

                    while(set.next()){
                        status=set.getInt("state_id");
                    }
                    statement.close();
                    connection.close();
                } catch (SQLException e) {
                    logger.error(e);
                    e.printStackTrace();
                }
                EventObject eventObject=new EventObject();
                eventObject.setOrderId(Long.parseLong(idApplication));
                eventObject.setEventDate(getXMLGregorianCalendarNow());


                OrderStatusEvent.StatusCode statusCode=new OrderStatusEvent.StatusCode();
                statusCode.setTechCode(Long.valueOf(map.get(status)));
                OrderStatusEvent orderStatusEvent=new OrderStatusEvent();
                orderStatusEvent.setStatusCode(statusCode);
                if(statusCode.getTechCode()==2 || statusCode.getTechCode()==6){
                    orderStatusEvent.setCancelAllowed(false);
                }else{
                    orderStatusEvent.setCancelAllowed(true);
                }
                EventObject.Event event=new EventObject.Event();
                event.setOrderStatusEvent(orderStatusEvent);
                eventObject.setEvent(event);

                QName qName=new QName(properties.getProperty("namespace.uri.status"),properties.getProperty("localpart.uri.status"));
                JAXBElement<EventObject> element=new JAXBElement<EventObject>(qName,EventObject.class,eventObject);


                //send status to smev

                Signer jcpSigner;
                SMEVMessageExchangeService service3;
                ru.it.smev.message_exchange.autogenerated.service.v1_2.SMEVMessageExchangeService service2;
                SMEV3Messager messager = null;

                String certIdFromProperties=properties.getProperty("jcp.certid");
                String convertedCertId=new String(certIdFromProperties.getBytes("ISO-8859-1"), StandardCharsets.UTF_8);

                try {
                    String algorithm=properties.getProperty("algorithm");
                    switch (algorithm){
                        case "gost2001":
                            jcpSigner = SignerProvider.gost_r_34_10_2001_jcp2.configure(properties.getProperty("jcp.storename"), properties.getProperty("jcp.containername"),
                                    properties.getProperty("jcp.containerpassword"), convertedCertId);
                            break;
                        case "gost2012_256":
                            jcpSigner = SignerProvider.gost_r_34_10_2012_256.configure(properties.getProperty("jcp.storename"), properties.getProperty("jcp.containername"),
                                    properties.getProperty("jcp.containerpassword"), convertedCertId);
                            break;
                        case "gost2012_512":
                            jcpSigner = SignerProvider.gost_r_34_10_2012_512.configure(properties.getProperty("jcp.storename"), properties.getProperty("jcp.containername"),
                                    properties.getProperty("jcp.containerpassword"), convertedCertId);
                            break;
                        default:
                            jcpSigner= SignerProvider.gost_r_34_10_2012_256.configure(properties.getProperty("jcp.storename"), properties.getProperty("jcp.containername"),
                                    properties.getProperty("jcp.containerpassword"), convertedCertId);
                            break;
                    }
                    if(properties.getProperty("smev.version").equalsIgnoreCase("1.3")){
                        try {
                        service3 = new SMEVMessageExchangeService(new URL(properties.getProperty("smev3.url")));
                        messager = new SMEV3MessagerVer3(service3, jcpSigner,properties.getProperty("namespace.uri.status"),properties.getProperty("localpart.uri.status"), Boolean.valueOf(properties.getProperty("usetest")));
                        } catch (DatatypeConfigurationException | MalformedURLException e) {
                        logger.error(e);
                        e.printStackTrace();
                        }
                    }else {
                        try {
                            service2= new ru.it.smev.message_exchange.autogenerated.service.v1_2.SMEVMessageExchangeService(new URL(properties.getProperty("smev2.url")));
                            messager=new SMEV3MessagerVer2(service2,jcpSigner,properties.getProperty("namespace.uri.ege"),"NewRequest",Boolean.valueOf(properties.getProperty("usetest")));
                        } catch (MalformedURLException e) {
                            logger.error(e);
                            e.printStackTrace();
                        }

                    }
                    messager.connect();

                  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
                  dbf.setNamespaceAware(true);
                    DocumentBuilder db = dbf.newDocumentBuilder();

                    Document doc = db.newDocument();
                    JAXB.marshal(element,new DOMResult(doc));

                    SMEV3SendingContext sendingContext = messager.sendRequest(doc.getDocumentElement());
                    System.out.println("Запрос смены статуса в СМЭВ");

                } catch (  SignerInitializationException | SignerConfigureException | JAXBException | ParserConfigurationException | RecipientIsNotFoundException | QuoteLimitExceededException | StaleMessageIdException | MessageIsAlreadySentException | ru.it.smev.message_exchange.autogenerated.service.v1_1.RecipientIsNotFoundException |  ru.it.smev.message_exchange.autogenerated.service.v1_1.StaleMessageIdException | ru.it.smev.message_exchange.autogenerated.service.v1_2.DestinationOverflowException | SignatureVerificationFaultException | ru.it.smev.message_exchange.autogenerated.service.v1_1.SignatureVerificationFaultException | ru.it.smev.message_exchange.autogenerated.service.v1_3.SMEVFailureException | ru.it.smev.message_exchange.autogenerated.service.v1_3.SignatureVerificationFaultException | ru.it.smev.message_exchange.autogenerated.service.v1_3.SenderIsNotRegisteredException | ru.it.smev.message_exchange.autogenerated.service.v1_1.AttachmentContentMiscoordinationException | AttachmentContentMiscoordinationException | ru.it.smev.message_exchange.autogenerated.service.v1_3.AttachmentContentMiscoordinationException | ru.it.smev.message_exchange.autogenerated.service.v1_1.AttachmentSizeLimitExceededException | InvalidMessageIdFormatException | ru.it.smev.message_exchange.autogenerated.service.v1_2.QuoteLimitExceededException | ru.it.smev.message_exchange.autogenerated.service.v1_3.InvalidContentException | BusinessDataTypeIsNotSupportedException | ru.it.smev.message_exchange.autogenerated.service.v1_1.SenderIsNotRegisteredException | ru.it.smev.message_exchange.autogenerated.service.v1_1.SMEVFailureException | ru.it.smev.message_exchange.autogenerated.service.v1_1.InvalidMessageIdFormatException | ru.it.smev.message_exchange.autogenerated.service.v1_1.BusinessDataTypeIsNotSupportedException | ru.it.smev.message_exchange.autogenerated.service.v1_1.InvalidContentException | SigningException | ru.it.smev.message_exchange.autogenerated.service.v1_3.AttachmentSizeLimitExceededException | ru.it.smev.message_exchange.autogenerated.service.v1_1.QuoteLimitExceededException | SenderIsNotRegisteredException | ru.it.smev.message_exchange.autogenerated.service.v1_3.InvalidMessageIdFormatException | ru.it.smev.message_exchange.autogenerated.service.v1_3.DestinationOverflowException | ru.it.smev.message_exchange.autogenerated.service.v1_3.MessageIsAlreadySentException | ru.it.smev.message_exchange.autogenerated.service.v1_3.BusinessDataTypeIsNotSupportedException | InvalidContentException | SMEVFailureException | ru.it.smev.message_exchange.autogenerated.service.v1_1.MessageIsAlreadySentException | ru.it.smev.message_exchange.autogenerated.service.v1_2.RecipientIsNotFoundException | ru.it.smev.message_exchange.autogenerated.service.v1_3.StaleMessageIdException | AttachmentSizeLimitExceededException | DestinationOverflowException e) {
                    logger.error(e);
                    e.printStackTrace();
                } catch (EndOfLifeException | ru.it.smev.message_exchange.autogenerated.service.v1_3.AccessDeniedException | ru.it.smev.message_exchange.autogenerated.service.v1_3.TransactionCodeInvalidException | AccessDeniedException | TransactionCodeInvalidException | ru.it.smev.message_exchange.autogenerated.service.v1_3.EndOfLifeException | ru.it.smev.message_exchange.autogenerated.service.v1_1.TransactionCodeInvalidException | ru.it.smev.message_exchange.autogenerated.service.v1_1.AccessDeniedException | ru.it.smev.message_exchange.autogenerated.service.v1_1.EndOfLifeException e) {
                    e.printStackTrace();
                    logger.error(e);
                }

            } catch (JSONException | DatatypeConfigurationException | UnsupportedEncodingException e) {
                logger.error(e);
                e.printStackTrace();
            }

        };




        try (PGConnection connection=(PGConnection)dataSource.getConnection();
             Statement statement=connection.createStatement()
        ){
            statement.execute("LISTEN current_state");
            connection.addNotificationListener(listener);

            while (true){}

        }catch (Exception e){
            logger.error(e);
            e.printStackTrace();
        }


    }

    public static XMLGregorianCalendar getXMLGregorianCalendarNow() throws DatatypeConfigurationException {
        GregorianCalendar gregorianCalendar = new GregorianCalendar();
        DatatypeFactory datatypeFactory = DatatypeFactory.newInstance();
        XMLGregorianCalendar now =
                datatypeFactory.newXMLGregorianCalendar(gregorianCalendar);
        return now;
    }


    public static void saveEventObjectToXml(JAXBElement<EventObject> eventObjectJAXBElement, String id) throws JAXBException, FileNotFoundException {
        JAXBContext jaxbContext = JAXBContext.newInstance(EventObject.class);
        Marshaller marshaller = jaxbContext.createMarshaller();

        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
        String currentDate= String.valueOf(LocalDate.now());
        File out=new File("/home/igor/СМЭВ logs/"+currentDate+"/Requests/"+id+".xml");
        File dir = out.getParentFile();
        if(!dir.exists())
            dir.mkdirs();
        marshaller.marshal(eventObjectJAXBElement, out);
    }

    public static void saveSendingContext(SMEV3SendingContext context) throws IOException {

        String currentDate= String.valueOf(LocalDate.now());
        File out=new File("/home/igor/СМЭВ logs/"+currentDate+"/Requests/"+context.getMessageId()+".xml");
        File dir = out.getParentFile();
        if(!dir.exists())
            dir.mkdirs();
        Files.write(Paths.get(out.getPath()),smev3SendingContextToXMLString(context).getBytes("UTF-8"),StandardOpenOption.CREATE)
        ;

    }

    private static String smev3SendingContextToXMLString(SMEV3SendingContext sendingContext) {
        String xmlString = "";
        try {
            JAXBContext context = JAXBContext.newInstance(SMEV3SendingContext.class);
            Marshaller m = context.createMarshaller();

            m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE); // To format XML

            StringWriter sw = new StringWriter();
            m.marshal(sendingContext, sw);
            xmlString = sw.toString();

        } catch (JAXBException e) {
            logger.error(e);
            e.printStackTrace();
        }

        return xmlString;
    }

}
