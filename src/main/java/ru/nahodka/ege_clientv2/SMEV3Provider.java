package ru.nahodka.ege_clientv2;

import clientv2.wsdl.NewRequestType;
import clientv2.wsdl.NewResponseType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import ru.it.smev.message_exchange.autogenerated.service.v1_1.SenderIsNotRegisteredException;
import ru.it.smev.message_exchange.autogenerated.service.v1_2.InvalidContentException;
import ru.it.smev.message_exchange.autogenerated.service.v1_2.UnknownMessageTypeException;
import ru.it.smev.message_exchange.autogenerated.service.v1_3.*;
import ru.nakhodka.smev3.*;
import javax.xml.bind.*;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import java.io.*;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.Properties;

@Component
public class SMEV3Provider {
    private static final org.apache.log4j.Logger logger= org.apache.log4j.Logger.getLogger(SMEV3Provider.class);
    private final Client quoteClient;
    Properties properties;


    @Autowired
    public SMEV3Provider(Client quoteClient) {
        this.quoteClient = quoteClient;
    }

    @Scheduled(fixedDelay = 300000L, initialDelay = 300000L)
    public void sign() throws SenderIsNotRegisteredException, SMEVFailureException, ru.it.smev.message_exchange.autogenerated.service.v1_2.SMEVFailureException, InvalidContentException, ru.it.smev.message_exchange.autogenerated.service.v1_1.SMEVFailureException, SignatureVerificationFaultException, UnknownMessageTypeException, ru.it.smev.message_exchange.autogenerated.service.v1_3.UnknownMessageTypeException, ru.it.smev.message_exchange.autogenerated.service.v1_3.InvalidContentException, ru.it.smev.message_exchange.autogenerated.service.v1_2.SenderIsNotRegisteredException, ru.it.smev.message_exchange.autogenerated.service.v1_1.SignatureVerificationFaultException, ru.it.smev.message_exchange.autogenerated.service.v1_1.UnknownMessageTypeException, ru.it.smev.message_exchange.autogenerated.service.v1_2.SignatureVerificationFaultException, ru.it.smev.message_exchange.autogenerated.service.v1_3.SenderIsNotRegisteredException, ru.it.smev.message_exchange.autogenerated.service.v1_1.InvalidContentException, IOException, SignerConfigureException, SignerInitializationException, JAXBException, DatatypeConfigurationException, SigningException, ru.it.smev.message_exchange.autogenerated.service.v1_2.TargetMessageIsNotFoundException, TargetMessageIsNotFoundException, ru.it.smev.message_exchange.autogenerated.service.v1_1.TargetMessageIsNotFoundException, ParserConfigurationException, SAXException, ru.it.smev.message_exchange.autogenerated.service.v1_1.IncorrectResponseContentTypeException, ru.it.smev.message_exchange.autogenerated.service.v1_2.AttachmentContentMiscoordinationException, ru.it.smev.message_exchange.autogenerated.service.v1_1.MessageIsAlreadySentException, RecipientIsNotFoundException, ru.it.smev.message_exchange.autogenerated.service.v1_2.InvalidMessageIdFormatException, ru.it.smev.message_exchange.autogenerated.service.v1_1.RecipientIsNotFoundException, ru.it.smev.message_exchange.autogenerated.service.v1_1.StaleMessageIdException, MessageIsAlreadySentException, ru.it.smev.message_exchange.autogenerated.service.v1_2.DestinationOverflowException, ru.it.smev.message_exchange.autogenerated.service.v1_1.BusinessDataTypeIsNotSupportedException, AttachmentContentMiscoordinationException, AttachmentSizeLimitExceededException, DestinationOverflowException, ru.it.smev.message_exchange.autogenerated.service.v1_1.InvalidMessageIdFormatException, ru.it.smev.message_exchange.autogenerated.service.v1_1.DestinationOverflowException, QuoteLimitExceededException, ru.it.smev.message_exchange.autogenerated.service.v1_1.QuoteLimitExceededException, IncorrectResponseContentTypeException, ru.it.smev.message_exchange.autogenerated.service.v1_2.BusinessDataTypeIsNotSupportedException, ru.it.smev.message_exchange.autogenerated.service.v1_2.AttachmentSizeLimitExceededException, ru.it.smev.message_exchange.autogenerated.service.v1_2.IncorrectResponseContentTypeException, ru.it.smev.message_exchange.autogenerated.service.v1_1.AttachmentContentMiscoordinationException, ru.it.smev.message_exchange.autogenerated.service.v1_2.StaleMessageIdException, InvalidMessageIdFormatException, ru.it.smev.message_exchange.autogenerated.service.v1_2.MessageIsAlreadySentException, StaleMessageIdException, ru.it.smev.message_exchange.autogenerated.service.v1_2.QuoteLimitExceededException, ru.it.smev.message_exchange.autogenerated.service.v1_1.AttachmentSizeLimitExceededException, BusinessDataTypeIsNotSupportedException, ru.it.smev.message_exchange.autogenerated.service.v1_2.RecipientIsNotFoundException, TransformerException {
        try {
        properties=PropertiesLoader.getProperties();
        Signer jcpSigner;
        SMEVMessageExchangeService service;
        SMEV3Messager messager;

        String certIdFromProperties=properties.getProperty("jcp.certid");
        String convertedCertId=new String(certIdFromProperties.getBytes("ISO-8859-1"), StandardCharsets.UTF_8);

            service = new SMEVMessageExchangeService(new URL(properties.getProperty("smev3.url")));
            String algorithm=properties.getProperty("algorithm");
            switch (algorithm){
                case "gost2001":
                    jcpSigner = SignerProvider.gost_r_34_10_2001_jcp2.configure(properties.getProperty("jcp.storename"), properties.getProperty("jcp.containername"),
                            properties.getProperty("jcp.containerpassword"), convertedCertId);
                    break;
                case "gost2012_256":
                    jcpSigner = SignerProvider.gost_r_34_10_2012_256.configure(properties.getProperty("jcp.storename"), properties.getProperty("jcp.containername"),
                            properties.getProperty("jcp.containerpassword"), convertedCertId);
                    break;
                case "gost2012_512":
                    jcpSigner = SignerProvider.gost_r_34_10_2012_512.configure(properties.getProperty("jcp.storename"), properties.getProperty("jcp.containername"),
                            properties.getProperty("jcp.containerpassword"), convertedCertId);
                    break;
                default:
                    jcpSigner= SignerProvider.gost_r_34_10_2001_jcp2.configure(properties.getProperty("jcp.storename"), properties.getProperty("jcp.containername"),
                            properties.getProperty("jcp.containerpassword"), convertedCertId);
                    break;
            }
            messager = new SMEV3MessagerVer3(service, jcpSigner, properties.getProperty("namespace.uri.ege"),
                    "NewRequest", Boolean.valueOf(properties.getProperty("usetest")));
            messager.connect();

            SMEV3MessageContext context= messager.getRequest();

				Element element;
				NewRequestType requestFromSmevContext;
				JAXBElement<NewResponseType> response;

				if (context.getData() != null || !String.valueOf(context.getId()).equalsIgnoreCase("")) {
                messager.sendAck(context.getId(),true);
                    element = context.getData();

                    //if (isTestMessage(element)) {
                    String pathToTestResponses=properties.getProperty("path.to.test.responses");
                    if (Boolean.valueOf(properties.getProperty("usetest"))) {
                        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
                        dbf.setNamespaceAware(true);
                        DocumentBuilder db = dbf.newDocumentBuilder();
                        if (element.getElementsByTagNameNS("*","GetEgeResultsRequest").getLength() != 0) {
                            File test = new File(pathToTestResponses+"EgeResultResponseTest.xml");
                            FileInputStream fileInputStream = new FileInputStream(test);
                            Document doc = db.parse(fileInputStream);
                            SMEV3SendingContext sendingContext = messager.sendResponse(doc.getDocumentElement(), context.getTo());
                            logger.info("Отправлено GetEgeResultResponse");
                            System.out.println("Отправлено GetEgeResultResponse");
                        } else if (element.getElementsByTagNameNS("*","AppealRequest").getLength() != 0) {
                            File test = new File(pathToTestResponses+"AppealResponseTest.xml");
                            FileInputStream fileInputStream = new FileInputStream(test);
                            Document doc = db.parse(fileInputStream);
                            SMEV3SendingContext sendingContext = messager.sendResponse(doc.getDocumentElement(), context.getTo());
                            logger.info("Отправлено AppealResponse");
                            System.out.println("Отправлено AppealResponse");
                        } else if (element.getElementsByTagNameNS("*","AppealCancelRequest").getLength() != 0) {
                            File test = new File(pathToTestResponses+"AppealCancelResponseTest.xml");
                            FileInputStream fileInputStream = new FileInputStream(test);
                            Document doc = db.parse(fileInputStream);
                            SMEV3SendingContext sendingContext = messager.sendResponse(doc.getDocumentElement(), context.getTo());
                            logger.info("Отправлено AppealCancelResponse");
                            System.out.println("Отправлено AppealCancelResponse");
                        } else if (element.getElementsByTagNameNS("*","GetDictionaryContentRequest").getLength() != 0) {
                            NodeList nodeList = element.getElementsByTagNameNS("*","dictionaryName");
                            String dictionaryName = nodeList.item(0).getTextContent();
                            if (dictionaryName.equalsIgnoreCase("subject")) {
                                File test = new File(pathToTestResponses+"SubjectResponseTest.xml");
                                FileInputStream fileInputStream = new FileInputStream(test);
                                Document doc = db.parse(fileInputStream);
                                SMEV3SendingContext sendingContext = messager.sendResponse(doc.getDocumentElement(), context.getTo());
                                logger.info("Отправлено SubjectResponse");
                                System.out.println("Отправлено SubjectResponse");

                            } else if (dictionaryName.equalsIgnoreCase("edu_organization")) {
                                File test = new File(pathToTestResponses+"EduOrganizationTest.xml");
                                FileInputStream fileInputStream = new FileInputStream(test);
                                Document doc = db.parse(fileInputStream);
                                SMEV3SendingContext sendingContext = messager.sendResponse(doc.getDocumentElement(), context.getTo());
                                logger.info("Отправлено EduOrganizationResponse");
                                System.out.println("Отправлено EduOrganizationResponse");
                            } else if (dictionaryName.equalsIgnoreCase("examination_point")) {
                                File test = new File(pathToTestResponses+"ExaminationPointTest.xml");
                                FileInputStream fileInputStream = new FileInputStream(test);
                                Document doc = db.parse(fileInputStream);
                                SMEV3SendingContext sendingContext = messager.sendResponse(doc.getDocumentElement(), context.getTo());
                                logger.info("Отправлено ExaminationPointResponse");
                                System.out.println("Отправлено ExaminationPointResponse");
                            }
                        }
					} else {

						JAXBContext jaxbContext = JAXBContext.newInstance(NewRequestType.class);
						Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
						JAXBElement<NewRequestType> requestTypeJAXBElement=unmarshaller.unmarshal(element,NewRequestType.class);
                        requestFromSmevContext=requestTypeJAXBElement.getValue();



                        response = quoteClient.manageRequest(requestFromSmevContext);


						DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
						dbf.setNamespaceAware(true);
						DocumentBuilder db = dbf.newDocumentBuilder();

						Document doc = db.parse(new InputSource(new StringReader(jaxbObjectToXML(response))));
						SMEV3SendingContext sendingContext = messager.sendResponse(doc.getDocumentElement(), context.getTo());
						sendingContext.getStatusVer3();
						logger.info(jaxbObjectToXML(response));
                        System.out.println("Че-то отправлено");


                    }


                }
        }catch (NullPointerException e){
        //    logger.error(e+" Нет запросов в СМЭВ");
            System.out.println("Нет запросов в СМЭВ");
        }
    }

    private boolean isTestMessage(Element element){
        NodeList nodeList=element.getElementsByTagName("TestMessage");
        return nodeList.getLength() != 0;
    }

    private static String jaxbObjectToXML(JAXBElement<NewResponseType> customer) {
        String xmlString = "";
        try {
            JAXBContext context = JAXBContext.newInstance(NewResponseType.class);
            Marshaller m = context.createMarshaller();

            m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE); // To format XML

            StringWriter sw = new StringWriter();
            m.marshal(customer, sw);
            xmlString = sw.toString();

        } catch (JAXBException e) {
            logger.error(e);
            e.printStackTrace();
        }

        return xmlString;
    }

}
